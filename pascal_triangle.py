# -*- coding: utf-8 -*-
"""
Time complexity : O(N*N) where N is the number of rows to be generated in a triangle
Space Complexity : O(1) as no extra space used
"""

class Solution:
    def generate(self, numRows: int):
        #edge case
        if numRows == 0:
            return []
        if numRows == 1:
            return [1]
        #we will create an empty list, which will accumulate all the previous rows's elements
        #the previous rows list is generated by a series of 1s in  a triangle of rows = numRows
        #the sum of elements from the previous rows are populated in as elements in the list in the current row
        # the output list is appended by a list of previous rows generating a Pascals triangle
        
        #create an empty list
        l = []
        
        for i in range(numRows): 
            
            p = [1]*(i+1) #generate all 1s in p
            
            if len(p) >= 2:
                for j in range(1, len(p)-1):
                    p[j] = l[-1][j-1] + l[-1][j]#sum from previous rows elements
                
            l.append(p)
            
        return l #output list of lists
    
