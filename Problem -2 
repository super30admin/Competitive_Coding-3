// Time Complexity :O(n) - as the number of rows to be generated increases, the time increases. O(1)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach : create the rows one by one until the number of rows limit is not reached.

class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> generate(int numRows) {
        result=new ArrayList<List<Integer>>();
        if(numRows==0) return result;
        for(int i=0;i<numRows;i++){
          List<Integer>  row=new ArrayList<>();
            for(int j=0;j<=i;j++){
                if(j==0||j==i) row.add(1);
                else{
                    int left=result.get(i-1).get(j-1);
                    int right=result.get(i-1).get(j);
                    row.add(left+right);
                }
            }
            result.add(row);
        }
        
        return result;
        
    }
}