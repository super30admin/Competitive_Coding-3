//TimeComplexity O(n)
//SpaceComplexity O(1)

class Solution {
    public int firstMissingPositive(int[] nums) {
        int n = nums.length;
        //null case
        if(n == 0)return 1;
       // single element case
        if(n == 1){
            if(nums[0] <= 0 || nums[0] > 1){
                return 1;
            }else{
                return 2;
            } 
            }
        
        for(int i = 0 ; i< n; i++){
            if(nums[i] <= 0){
                nums[i] = n+2;
            }            
        }
        
        for(int i = 0; i < n; i++){
            int index = Math.abs(nums[i]) - 1;
            if(index >= 0 && index < n){
                if(nums[index] > 0){
                    nums[index] = -1 * nums[index];
                }
                
            }else{
                continue;
            }
        }
        
        for(int i = 0 ;i < n; i++){
            if(nums[i] <= 0){
                continue;
            }else{
                return i+1;
            }
            
        }
        
        return n+1;
    }
}
