// Time Complexity : O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class Solution {
    public int findPairs(int[] nums, int k) {
       
        /* edge case */
       if (nums == null || nums.length == 0 || k < 0)   return 0;
        
        /* store number and its count */
        Map<Integer, Integer> map = new HashMap<>();
        int count = 0;
        for (int i : nums) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        
        /* iterate over map and for number find k diff number in hashmap */
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            
            // in case its zero count the number with same value
            if (k == 0) {
                //count how many elements in the array that appear more than twice.
                if (entry.getValue() >= 2) {
                    count++;
                } 
            } else {  // else  find if there is  number +k number available
                if (map.containsKey(entry.getKey() + k)) {
                    count++; // increase count
                }
            }
        }
        
        return count;  // return count
    }
}