//Bruteforce

//timeComplexity O(n^2)
SpaceComplexity O(1)

class Solution {
    public int findPairs(int[] nums, int k) {
        Arrays.sort(nums);
        int n = nums.length;
        HashSet<int[]> set = new HashSet<>();
        int count =0;
        for(int i = 0 ; i < n-1; i++){
            if(i > 0 && nums[i-1] == nums[i]){
                    continue;
                }
            for(int j = i+1; j < n; j++){
                if(j > i+1 && nums[j] == nums[j-1]){
                    continue;
                }
                if(Math.abs(nums[i]- nums[j]) == k){
                    count++;
                }
            }
        }
        return count;
    }
}

//Two Pointers

//timeComplexity nlogn
SpaceComplexity O(1)

class Solution {
    public int findPairs(int[] nums, int k) {
        Arrays.sort(nums);
        int n = nums.length;
        int start = 0;
        int end = 1;
        int count = 0;

        while(start < n && end < n){

            if(start == end || nums[end] - nums[start] < k){
                end++;
            }else if(nums[end] - nums[start] > k){
                start++;
            }else{
                if(nums[end] - nums[start] == k){
                 count++;
                 start++;
             }
                while(start > 0 && start < n && nums[start] == nums[start-1]){
         
                 start++;
                 
             }
              
            }


        }
        return count;
    }
}

//HashMap

//TimeComplexity O(n)
//SpaceComplexity O(n)

class Solution {
    public int findPairs(int[] nums, int k) {
       HashMap<Integer,Integer> map = new HashMap<>();
       int count = 0;

        for(int num : nums){
            map.put(num,map.getOrDefault(num,0)+1);
        }
//Case 1 if k == 0  for every element when added with zero gives the same element and it will be there in the map 
//but we need to increment count only when two same elements are repeated such that there diff would be zero so the condition {k == 0 && map.get(key) > 1}
//Case 2  when k > 0 if x1 - x2 == k then k + x2 should be there in the map so for each element in the map we search for k + key
        for(int key : map.keySet()){

                if(k > 0 && map.containsKey(key+k)){
                    count++;
                }else if(k == 0 && map.get(key) > 1){
                    count++;
                }
        }
        return count;
    }
}
